{"version":3,"sources":["context/store.context.js","components/Header.js","services/api.js","components/NewPlantForm.js","components/PlantCard.js","components/PlantList.js","components/Search.js","components/PlantPage.js","components/App.js","index.js"],"names":["StoreContext","createContext","StoreProvider","children","useState","plants","users","cart","store","setStore","Provider","value","Header","className","role","Api","datapoint","host","this","console","log","fetch","then","resp","json","data","method","body","JSON","stringify","headers","id","term","plantsAPI","NewPlantForm","useContext","name","image","price","plant","setPlant","handleChange","evt","target","useEffect","plantInEdit","onSubmit","preventDefault","savingPlant","update","updatedPlant","prevStore","newStore","i","findIndex","p","create","newPlant","type","placeholder","onChange","step","onClick","PlantCard","inStock","setInStock","handleInStockEvent","src","undefined","alt","PlantList","all","map","Search","searchTerm","setSearchTerm","htmlFor","search","searchResult","PlantPage","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.73206020.chunk.js","sourcesContent":["import { createContext, useEffect, useState } from \"react\";\n\nexport const StoreContext = createContext();\n\nexport function StoreProvider({children}){\n    \n    /**\n     * The store state here will be a shared state across all \n     * StoreProvider child components\n     * \n     * You can store alot of data inside the store and make it available across \n     * e.g. users\n     */\n    const [ store, setStore ] = useState({\n        plants:[],\n        users:[],\n        cart:[]\n    });\n\n    return <StoreContext.Provider value={{store, setStore}}>\n        {children}\n    </StoreContext.Provider>\n}","import React from \"react\";\n\nfunction Header() {\n  return (\n    <header>\n      <h1>\n        Plantsy\n        <span className=\"logo\" role=\"img\">\n          ðŸŒ±\n        </span>\n      </h1>\n    </header>\n  );\n}\n\nexport default Header;\n","\n/**\n * This Api class is re-userable. \n * It contains all the CRUD Operations\n */\nexport class Api{\n\n  host=\"http://localhost:3001/\";\n\n  constructor( datapoint ){\n    this.host += `${datapoint}`\n    console.log(this.host);\n  }\n\n  get all(){\n      return fetch(this.host).then(resp=>resp.json());\n  }\n\n  create( data ){\n      return fetch(this.host, {\n          method:\"POST\",\n          body: JSON.stringify( data ),\n          headers: {\n              \"Content-Type\":\"application/json\"\n          }\n      }).then(resp=>resp.json());\n  }\n\n  update( id, data ){\n      return fetch(`${this.host}/${id}`, {\n          method:\"PATCH\",\n          body: JSON.stringify( data ),\n          headers: {\n              \"Content-Type\":\"application/json\"\n          }\n      }).then(resp=>resp.json());\n  }\n\n  delete( id ){\n      return fetch(`${this.host}/${id}`, {\n          method:\"DELETE\"\n      }).then(resp=>resp.json());\n  }\n\n  search(term){\n    return fetch(`${this.host}?q=${term}`).then(resp=>resp.json());\n  }\n\n}","import React, { useContext, useEffect, useState } from \"react\";\nimport { StoreContext } from \"../context/store.context\";\nimport { Api } from \"../services/api\";\n\nconst plantsAPI = new Api(\"plants\");\n\nfunction NewPlantForm( ) {\n\n  /**\n   * Use the context to get the plant that was clicked for editing\n   * from the PlantCard component\n   */\n  const {store, setStore} = useContext(StoreContext);\n\n  const [ plant, setPlant ] = useState({\n    name:'',\n    image: '',\n    price: 0\n  });\n\n  function handleChange( evt ){\n    setPlant({\n      ...plant,\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  /**\n   * This function handles both editing of plant and creating of plant\n   * @param {*} evt \n   * \n   */\n  function handleSubmit( evt ){\n    evt.preventDefault();\n    \n    if( store.plantInEdit ){ \n      /**\n     * if there is a plant being editted do the edit here\n     */\n\n      // This is to show a loader incase the request takes too long\n      setStore({...store, savingPlant:true});\n\n      /** do the update request if editing */\n      plantsAPI.update(store.plantInEdit.id, plant).then((updatedPlant)=>{\n        setStore((prevStore)=>{\n          const newStore = {...prevStore};\n          // Find the edited plant in the plants list\n          const i = newStore.plants.findIndex(p=>p.id==store.plantInEdit.id);\n          if(i > -1){\n            newStore.plants[i] = updatedPlant;\n          }\n          // Update the edited plant to update the PlantList Component and remove the loader\n          return {...newStore, plantInEdit:updatedPlant, savingPlant:false };\n        })\n      })\n\n    }\n    else{ \n      /**\n       * Create a new plant\n       */\n      plantsAPI.create(plant).then((newPlant)=>{\n        // Update the store to also update the PlantList Component with the new plant\n        setStore({...store, plants:[...store.plants, newPlant]})\n      })\n    }\n\n  }\n\n  function cancelEdit(){\n    setStore({...store, plantInEdit:null});\n  }\n\n  /**\n   * The useEffect here is used to monitor if there is plant being edited or created\n   */\n  useEffect(()=>{\n    if(store.plantInEdit){\n      /**\n       * Populate the form with the data of the plant being edited\n       */\n      setPlant( store.plantInEdit );\n    }\n    else{\n      \n      /**\n       * Empty the form fields if the user cancels edit\n       */\n      setPlant({\n        name:'',\n        image: '',\n        price: 0\n      });\n    }\n  }, [ store ])\n  \n  return (\n    <div className=\"new-plant-form\">\n      <h2>{store.plantInEdit ? \"Edit Plant\" : \"New Plant\"}</h2>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"name\" placeholder=\"Plant name\" onChange={ handleChange } value={ plant.name } />\n        <input type=\"text\" name=\"image\" placeholder=\"Image URL\" onChange={ handleChange } value={plant.image} />\n        <input type=\"number\" name=\"price\" step=\"0.01\" placeholder=\"Price\" onChange={ handleChange } value={plant.price} />\n        \n        {/* Show the loader when saving */}\n        { store.savingPlant ? <div>Saving...</div> : <><button type=\"submit\">{store.plantInEdit ? \"Edit\" : \"Add\"} Plant</button>\n        {store.plantInEdit && <button onClick={cancelEdit}> Cancel Edit </button> }</> }\n      </form>\n    </div>\n  );\n}\n\nexport default NewPlantForm;\n","import React, { useContext, useState } from \"react\";\nimport { StoreContext } from \"../context/store.context\";\n\nfunction PlantCard( { plant } ) {\n\n  const {store, setStore} = useContext(StoreContext);\n  const [inStock, setInStock] = useState(true);\n\n  // Function for handling in stock\n  function handleInStockEvent(){\n    setInStock( !inStock );\n  }\n\n  function handleEdit(){\n    /**\n     * use the context to send the plant that is being edited to the \n     * NewPlantForm component\n     */\n    setStore( { ...store, plantInEdit:plant } );\n  }\n\n  return (\n    <li className=\"card\">\n      <img src={plant.image ==undefined ? \"https://via.placeholder.com/400\" : plant.image  } alt={\"plant name\"} />\n      \n      <h4>{plant.name}</h4>\n      <p>Price: {plant.price} <button onClick={ handleEdit } >Edit Price</button> </p>\n      {inStock ? (\n        <button className=\"primary\" onClick={ handleInStockEvent } >In Stock</button>\n      ) : (\n        <button onClick={ handleInStockEvent }>Out of Stock</button>\n      )}\n    </li>\n  );\n}\n\nexport default PlantCard;\n","import React, { useContext, useEffect } from \"react\";\nimport { StoreContext } from \"../context/store.context\";\nimport PlantCard from \"./PlantCard\";\n\n// Import and instantiate the plantsApi class\nimport { Api } from \"../services/api\";\nconst plantsAPI = new Api('plants');\n\nfunction PlantList() {\n\n  // Use the context to load the plants and list plants array updates\n  const {store, setStore} = useContext(StoreContext);\n  \n  useEffect(()=>{\n    plantsAPI.all.then(plants=>setStore({...store, plants}));\n  }, []);\n\n  return (\n    <ul className=\"cards\">{\n      store.plants.map( plant => <PlantCard key={plant.id} plant={plant} /> )\n    }</ul>\n  );\n}\n\nexport default PlantList;\n","import React, { useContext, useState } from \"react\";\nimport { StoreContext } from \"../context/store.context\";\nimport { Api } from \"../services/api\";\n\n// instantiate the plantAPI class\nconst plantsAPI = new Api(\"plants\");\n\nfunction Search() {\n\n  //use context to handle the search and effect the PlantsList component\n  const { store, setStore } = useContext(StoreContext);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  function handleSearch(evt) {\n    setSearchTerm(evt.target.value);\n    if (searchTerm == '') {\n      // set all plants if the search field is empty\n      plantsAPI.all.then(plants => setStore({ ...store, plants }));\n    }\n    else {\n      // else do the search using the search term\n      plantsAPI.search(searchTerm).then(searchResult => {\n        setStore({ ...store, plants: searchResult });\n      });\n    }\n  }\n\n  function handleClearSearch(){\n    setSearchTerm('');\n    plantsAPI.all.then(plants => setStore({ ...store, plants }));\n  }\n\n  return (\n    <div className=\"searchbar\">\n      <label htmlFor=\"search\">Search Plants:</label>\n      <input\n        type=\"text\"\n        id=\"search\"\n        placeholder=\"Type a name to search...\"\n        value={searchTerm}\n        onChange={handleSearch}\n      />\n      {searchTerm != '' && <button onClick={handleClearSearch}>Clear Search</button>}\n    </div>\n  );\n}\n\nexport default Search;\n","import React, { useEffect, useState } from \"react\";\nimport NewPlantForm from \"./NewPlantForm\";\nimport PlantList from \"./PlantList\";\nimport Search from \"./Search\";\n\nfunction PlantPage() {\n  return (\n    <main>\n      <NewPlantForm />\n      <Search />\n      <PlantList />\n    </main>\n  );\n}\n\nexport default PlantPage;\n","import React from \"react\";\nimport { StoreProvider } from \"../context/store.context\";\nimport Header from \"./Header\";\nimport PlantPage from \"./PlantPage\";\n\nfunction App() {\n  return (\n    /* Include the store provider which makes the store available in all components */\n    <StoreProvider>\n      <div className=\"app\">\n        <Header />\n        <PlantPage />\n      </div>\n    </StoreProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}